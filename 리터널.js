
    //문자열을 함수로 만듬 문자열자체를 함수로 인식 eval
    //함수를 만들어서 사칙연산을 구현하시오(함수 인자, 리턴)
    function sum(a,b){
        return a+b;
    }
    function minus(a,b){
        return a-b;
    }
    function nanum(a,b){
        return a/b;
    }
    function gob(a,b){
        return a*b;
    }
    function myprint(a,b,result){
        console.log(a,b,result);
        var r = '첫번째 변수는' + a + '두번째 변수는' + b + '결과는' + result;
        console.log(r);
    }
    sub(1,2);
    minus(1,2);
    nanum(1,2);
    gob(1,2);
    /////////////////////////////////////////////////////////////////
    //배열을 이용해서 다양한 인자를 받아서 합을 처리하시오(for문,array문)
    sub([1,2,3,4,5,6,7]);
    //사칙연산 함수에 버그를 찾아서 고치시오.(if문)
    //typeof
    //문자열 포맷을 데이트타입으로 변경하시오.20001119->2000-11-19
    //문자열중에서 ,콤마를 찾아서 모두 삭제하시오 11,2,3,4,5,6,7,8,9, ->1123456789
    //구분자들 통한 배열을 만드시오 '1,2,3,4,5,6,7,8' -> [1,2,3,4,5,6,7,8]
    //깊은 복사, 얇은 복사(객체를 복사,오브젝트복사라고 생각하면된다)에 대해서 알아보자, 배열을 복사하시오, 값복사와 참조를 아는지?
    //리터럴
    var Calc = {
        ma : 0,
        mb : 0,
        mresult : 0;
        
        sub:function(a,b){
            /*ma = a;
            mb = b;
            mresult = a+b;*/
            return a+b;
        },
        minus:function(a,b){
            /*ma = a;
            mb = b;
            mresult = a+b;*/
            return a+b;
            return a+b;
        },
        gob:function(a,b){
            /*ma = a;
            mb = b;
            mresult = a+b;*/
            return a+b;
            return a+b;
        },
        nanum:function(a,b){
            
            return a+b;
        }
        variable_pro

    }
    //오버라이딩하여 하나를 호출해도 여러개가 기능이되도록
    //tr
    //일급함수시험 외워오기
    //
    //var를쓰면 그 안에 서쓰고, var없이 그밖에 하면 전역변수 전역변수는 안쓰는게 좋음
    //전역변수는 밖에서 참조해서 안쓰는게 좋음
    //if문은 기간,구간에 대해 검색 스위치는 특정한값에 호출
    //for 좀더 제어할수있는 문법을 넣을수있지만 와일은 안됨 참일때 거짓일때 사용 복잡하지않을떄 와일 포문을 쓰는게 좋은 속도가 빠름
    //each안에 포문이 있다고 생각
    //한번실행되고 나서 조건이 걸림do while
    //return은 그 함수를 종료할때
    //throw 던짐
    //try-catch:에러확인할때 이용(try catch로 감싸서 에러확인)
    //for문 for in
    //underscore.js
    //배열이 컬렉션 그걸 잘써야함
    /*
    컬렉션 다룰줄모르면 일일이 호출하여야한다
    배열자체가 컬렉션
    배열의 있는 값들을 자유자재로 다룰수있음 컬렉션을 잘 다루게되면
    자료구조가 컬렉션
    에러 난곳이 한군데인데 던져버리는거 throw
    에러는 잡는거 try catch
    주로 크롬써서 잘 안씀
    ==,===동등
    호출하는입장에서 틀림
    ===강력하게 숫자
    ==1 =='1' 타입을 표시안하기 때문에 둘다 호출 숫자만 호출하고 싶으면 ===1
    값을 비교==
    주소참조를 비교===
    
    +=는 
    3개는 같게보면됨
    a++다음에 플러스
    a = a+1
    a+=1
    왕따
    ++a이전에 플러스
    
    
    
    
    ||초기화
    {}객체를 만들때
    []배열
    
    a = a+1;
    a= a||0;0으로 초기화
    a= a||{};삼항연상자를 사용한 초기화
    비트연산자-2진수를시프트하는것
    
    
    
    
    객체리터널
    2.객체안에 객체를 넣음
    선언과 동시에
    
    빈객체를 만들어서 점으로 연결해도된다
    
    var obj = {}
    obj.name="yeseul"
    obj['name'] = "yeseul"    
    
    obj['noh'] = 1;
    obj['ye'] = 1;
    obj['seul'] = 1;
    var array = ["noh","ye","seul"]
    for (var i=
    
    리터널이라는 것은 값이다
    
    회원가입같은거 정규식사용
    @이메일형식으로 적지않았을때
    알림창뜨게하도록하여서 정규식사용
    
    플러스 마이너스 는 객체가 아니다
    정보처리기사 산업기사
    
    배열로 쓰게되면for문으로 쓰기 좋다
    */